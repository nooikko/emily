services:
  # ==========================================
  # Core Application Services
  # ==========================================

  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: emily
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - emily-network

  redis:
    image: redis:8-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - emily-network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: emily-qdrant
    volumes:
      - qdrant-data:/qdrant/storage
    ports:
      - "6333:6333"
    networks:
      - emily-network


  # ==========================================
  # Observability Stack
  # ==========================================

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: emily-otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./docker/observability/otel-collector-config.yml:/etc/otel-collector-config.yml:ro
      - /var/log:/var/log:ro
      - otel_logs:/var/log/otel-collector
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # Health check
    environment:
      - LOKI_ENDPOINT=http://loki:3100
      - JAEGER_ENDPOINT=http://jaeger:14250
    depends_on:
      - loki
      - jaeger
    networks:
      - emily-network

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: emily-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./docker/observability/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - emily-network

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: emily-promtail
    volumes:
      - ./docker/observability/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - emily-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: emily-jaeger
    ports:
      - "16686:16686" # Jaeger UI
      - "14250:14250" # gRPC
      - "14268:14268" # HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    volumes:
      - jaeger_data:/badger
    networks:
      - emily-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: emily-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - emily-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: emily-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=emily123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/observability/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
      - loki
      - jaeger
    networks:
      - emily-network

volumes:
  postgres_data:
  redis_data:
  qdrant-data:
  loki_data:
  jaeger_data:
  prometheus_data:
  grafana_data:
  otel_logs:

  # LangSmith self-hosted volumes (uncomment if using self-hosted)
  # langsmith_postgres_data:
  # langsmith_redis_data:
  # langsmith_clickhouse_data:

networks:
  emily-network:
    driver: bridge